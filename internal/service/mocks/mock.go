// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "github.com/avealice/filmhub/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthorization is a mock of Authorization interface
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockAuthorization) CreateUser(user model.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method
func (m *MockAuthorization) ParseToken(token string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockMovie is a mock of Movie interface
type MockMovie struct {
	ctrl     *gomock.Controller
	recorder *MockMovieMockRecorder
}

// MockMovieMockRecorder is the mock recorder for MockMovie
type MockMovieMockRecorder struct {
	mock *MockMovie
}

// NewMockMovie creates a new mock instance
func NewMockMovie(ctrl *gomock.Controller) *MockMovie {
	mock := &MockMovie{ctrl: ctrl}
	mock.recorder = &MockMovieMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMovie) EXPECT() *MockMovieMockRecorder {
	return m.recorder
}

// GetAllMovies mocks base method
func (m *MockMovie) GetAllMovies(sortBy, sortOrder string) ([]model.MovieWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMovies", sortBy, sortOrder)
	ret0, _ := ret[0].([]model.MovieWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMovies indicates an expected call of GetAllMovies
func (mr *MockMovieMockRecorder) GetAllMovies(sortBy, sortOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMovies", reflect.TypeOf((*MockMovie)(nil).GetAllMovies), sortBy, sortOrder)
}

// CreateMovie mocks base method
func (m *MockMovie) CreateMovie(movie model.InputMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie
func (mr *MockMovieMockRecorder) CreateMovie(movie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovie)(nil).CreateMovie), movie)
}

// GetMovieByID mocks base method
func (m *MockMovie) GetMovieByID(movieID int) (model.MovieWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovieByID", movieID)
	ret0, _ := ret[0].(model.MovieWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovieByID indicates an expected call of GetMovieByID
func (mr *MockMovieMockRecorder) GetMovieByID(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovieByID", reflect.TypeOf((*MockMovie)(nil).GetMovieByID), movieID)
}

// DeleteByID mocks base method
func (m *MockMovie) DeleteByID(movieID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", movieID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockMovieMockRecorder) DeleteByID(movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockMovie)(nil).DeleteByID), movieID)
}

// UpdateMovie mocks base method
func (m *MockMovie) UpdateMovie(movieID int, data model.InputMovie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", movieID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie
func (mr *MockMovieMockRecorder) UpdateMovie(movieID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovie)(nil).UpdateMovie), movieID, data)
}

// GetMoviesByActor mocks base method
func (m *MockMovie) GetMoviesByActor(actor string) ([]model.MovieWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesByActor", actor)
	ret0, _ := ret[0].([]model.MovieWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesByActor indicates an expected call of GetMoviesByActor
func (mr *MockMovieMockRecorder) GetMoviesByActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesByActor", reflect.TypeOf((*MockMovie)(nil).GetMoviesByActor), actor)
}

// GetMoviesByTitle mocks base method
func (m *MockMovie) GetMoviesByTitle(title string) ([]model.MovieWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesByTitle", title)
	ret0, _ := ret[0].([]model.MovieWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesByTitle indicates an expected call of GetMoviesByTitle
func (mr *MockMovieMockRecorder) GetMoviesByTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesByTitle", reflect.TypeOf((*MockMovie)(nil).GetMoviesByTitle), title)
}

// MockActor is a mock of Actor interface
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// CreateActor mocks base method
func (m *MockActor) CreateActor(actor model.InputActor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor
func (mr *MockActorMockRecorder) CreateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActor)(nil).CreateActor), actor)
}

// GetAllActors mocks base method
func (m *MockActor) GetAllActors() ([]model.ActorWithMovies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActors")
	ret0, _ := ret[0].([]model.ActorWithMovies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActors indicates an expected call of GetAllActors
func (mr *MockActorMockRecorder) GetAllActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActors", reflect.TypeOf((*MockActor)(nil).GetAllActors))
}

// Delete mocks base method
func (m *MockActor) Delete(actorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockActorMockRecorder) Delete(actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActor)(nil).Delete), actorID)
}

// Get mocks base method
func (m *MockActor) Get(actorID int) (model.ActorWithMovies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", actorID)
	ret0, _ := ret[0].(model.ActorWithMovies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockActorMockRecorder) Get(actorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockActor)(nil).Get), actorID)
}

// Update mocks base method
func (m *MockActor) Update(actorID int, data model.InputActor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", actorID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockActorMockRecorder) Update(actorID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockActor)(nil).Update), actorID, data)
}
